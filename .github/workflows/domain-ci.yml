name: Domain CI

on:
  push:
    branches: [main]
    paths:
      - 'domain/**'
      - '.github/workflows/domain-ci.yml'
      - '.github/scripts/**'
  pull_request:
    branches: [main]
    paths:
      - 'domain/**'
      - '.github/workflows/domain-ci.yml'
      - '.github/scripts/**'

env:
  MIX_ENV: test
  ELIXIR_VERSION: '1.18'
  OTP_VERSION: '27.0'

jobs:
  quality:
    name: Code Quality (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: ['1.18']
        otp: ['27.0']

    defaults:
      run:
        working-directory: domain

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            domain/deps
            domain/_build
          key: ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('domain/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile dependencies
        run: mix deps.compile

      - name: Check formatting
        run: mix format --check-formatted

      - name: Check for unused dependencies
        run: mix deps.unlock --check-unused

      - name: Compile with warnings as errors
        run: mix compile --warnings-as-errors

      - name: Run Credo
        run: mix credo --strict

      - name: Restore PLT cache
        uses: actions/cache@v4
        id: plt-cache
        with:
          path: domain/priv/plts
          key: ${{ runner.os }}-plt-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('domain/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-plt-${{ matrix.otp }}-${{ matrix.elixir }}-

      - name: Create PLTs
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Run Dialyzer
        run: mix dialyzer

  tests:
    name: Property-Based Tests (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-latest
    timeout-minutes: ${{ github.event_name == 'pull_request' && '15' || '45' }}

    strategy:
      matrix:
        elixir: ['1.18']
        otp: ['27.0']

    defaults:
      run:
        working-directory: domain

    env:
      # PropCheck configuration for CI
      # PR: Faster feedback with reduced test cases (100)
      # Merge: Thorough testing with full test cases (500)
      PROPCHECK_NUMTESTS: ${{ github.event_name == 'pull_request' && '100' || '500' }}
      PROPCHECK_SEARCH_STEPS: ${{ github.event_name == 'pull_request' && '50000' || '100000' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to compare changes

      - name: Detect which tests to run
        id: detect-tests
        if: github.event_name == 'pull_request'
        working-directory: .
        run: |
          # Make script executable
          chmod +x .github/scripts/detect-domain-tests.sh

          # Use commit SHAs directly instead of branch names
          # This works reliably in GitHub Actions PR context
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.sha }}"

          # Run detection script and capture output
          output=$(.github/scripts/detect-domain-tests.sh "$BASE_SHA" "$HEAD_SHA")
          echo "$output"

          # Extract test pattern and description from script output
          test_pattern=$(echo "$output" | grep "^test_pattern=" | cut -d'=' -f2)
          test_description=$(echo "$output" | grep "^test_description=" | cut -d'=' -f2-)

          # Set outputs for later steps
          echo "pattern=$test_pattern" >> $GITHUB_OUTPUT
          echo "description=$test_description" >> $GITHUB_OUTPUT

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            domain/deps
            domain/_build
          key: ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('domain/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile
        run: mix compile

      - name: Run property-based tests
        run: |
          echo "======================================"
          echo "Running Property-Based Test Suite"
          echo "Event: ${{ github.event_name }}"
          echo "Configuration:"
          echo "  - Test cases per property: $PROPCHECK_NUMTESTS"
          echo "  - Search steps for shrinking: $PROPCHECK_SEARCH_STEPS"

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "  - Mode: PR (fast feedback with smart test selection)"
            TEST_PATTERN="${{ steps.detect-tests.outputs.pattern }}"
            TEST_DESC="${{ steps.detect-tests.outputs.description }}"
            if [ -n "$TEST_PATTERN" ]; then
              echo "  - Running: $TEST_DESC"
              echo "  - Test selection: $TEST_PATTERN"
            else
              echo "  - Running: All tests (no specific tags)"
              TEST_PATTERN=""
            fi
          else
            echo "  - Mode: Merge (thorough testing - all tests)"
            TEST_PATTERN=""
          fi
          echo "======================================"

          # Run tests with the determined pattern (tags or all tests)
          # If TEST_PATTERN is empty, run all tests
          # If TEST_PATTERN contains --only flags, use them for tag-based filtering
          if [ -z "$TEST_PATTERN" ]; then
            mix test test/ntbr/domain/ --formatter ExUnit.CLIFormatter --trace --slowest 10 || {
              echo ""
              echo "======================================"
              echo "❌ TESTS FAILED"
              echo "======================================"
              exit 1
            }
          else
            mix test test/ntbr/domain/ $TEST_PATTERN --formatter ExUnit.CLIFormatter --trace --slowest 10 || {
              echo ""
              echo "======================================"
              echo "❌ TESTS FAILED"
              echo "======================================"
              exit 1
            }
          fi
          echo ""
          echo "======================================"
          echo "✅ ALL TESTS PASSED"
          echo "======================================"

      - name: Upload PropCheck counterexamples
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: propcheck-counterexamples-domain-${{ github.run_id }}
          path: |
            domain/.propcheck
            domain/counterexample.*.erl
          if-no-files-found: ignore
          retention-days: 30

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-domain-${{ github.run_id }}
          path: domain/_build/test/lib/ntbr_domain/
          if-no-files-found: ignore
          retention-days: 7

  coverage:
    name: Code Coverage
    # Only run coverage on merge to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 45

    defaults:
      run:
        working-directory: domain

    env:
      # Use same configuration as merge test job for accurate coverage
      PROPCHECK_NUMTESTS: 500
      PROPCHECK_SEARCH_STEPS: 100000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            domain/deps
            domain/_build
          key: ${{ runner.os }}-mix-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('domain/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-

      - name: Install dependencies
        run: mix deps.get

      - name: Run tests with coverage
        run: |
          echo "Running property-based tests with coverage analysis..."
          mix coveralls.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-domain
          path: domain/cover/
          retention-days: 7
